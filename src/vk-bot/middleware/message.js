import isURL from 'validator/lib/isURL';
import _ from 'lodash';

import getData from 'lib/getData';
import parseURL from 'lib/parseURL';

const message = async (ctx, next) => {
  const message = ctx.message.body;
  const urls = await parseURL(message);

  if (message) {
    try {
      if (isURL(urls)) {
        const sendLinks = async () => {
          ctx.reply('üö¨ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —è –∏—â—É —Å—Å—ã–ª–∫–∏...');
          const data = await getData({
            link: urls
          });
          if (data) {
            const result = _.chain(data.songlink.nodesByUniqueId)
              .filter(item => item.sectionNodeUniqueId === 'AUTOMATED_SECTION::LISTEN' && item.url)
              .sortBy('displayName')
              .map(item => `${item.displayName}\n${item.url}\n\n`)
              .value()
              .join('');

            ctx.reply(result);
            ctx.reply('üëã –ì–æ—Ç–æ–≤–æ!');
          } else {
            ctx.reply('üò£ –ö–∞–∂–µ—Ç—Å—è —É –º–µ–Ω—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å –≤–µ—Ä–Ω—ã–π.');
          }
        };
        sendLinks();
      } else {
        ctx.reply('ü§î –Ø –¥—É–º–∞—é, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞...');
      }
    } catch (e) {
      ctx.reply('ü§î –Ø –¥—É–º–∞—é, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞...');
    }
  }
};

export default message;
